# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages: 
- stage: TerraformDeployment 
  displayName: Deploy Azure resources 
  jobs: 
  - job: TerraformVM01 
    displayName: 
    steps: 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform latest'
      inputs: 
        terraformVersion: 'latest'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
        backendServiceArm: 'Terraform Pipeline'
        backendAzureRmResourceGroupName: TestRG
        backendAzureRmStorageAccountName: terraformbacend123
        backendAzureRmContainerName: backendstate
        backendAzureRmKey: terraform.tfstate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
        environmentServiceNameAzureRM: 'Terraform Pipeline'
        commandOptions: '-out=vmplan'
    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
        environmentServiceNameAzureRM: 'Terraform Pipeline'
        commandOptions: 'vmplan' #-auto-approve
    
    #- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
    #  displayName: 'Terraform Destroy'
    #  inputs:
    #   provider: 'azurerm'
    #    command: destroy
    #    workingDirectory: '$(System.DefaultWorkingDirectory)/VM'
    #    environmentServiceNameAzureRM: 'Terraform Pipeline'
    #    commandOptions: '-auto-approve -input=false tfplan' 
